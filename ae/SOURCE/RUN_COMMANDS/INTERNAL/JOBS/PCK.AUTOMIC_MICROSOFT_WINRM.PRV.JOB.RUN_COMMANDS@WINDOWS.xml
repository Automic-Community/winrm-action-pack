<?xml version="1.0" encoding="ISO-8859-15" standalone="no"?><uc-export clientvers="11.0.0">
<JOBS_WINDOWS AttrType="WINDOWS" name="PCK.AUTOMIC_MICROSOFT_WINRM.PRV.JOB.RUN_COMMANDS@WINDOWS">
<XHEADER state="1">
<Title>Run Commands</Title>
<ArchiveKey1/>
<ArchiveKey2/>
<Active>1</Active>
<OH_SubType/>
<CustomAttributes KeyListID="0" dataRequestID="0"/>
</XHEADER>
<OUTPUTREG state="1">
<FileReg/>
</OUTPUTREG>
<SYNCREF state="1">
<Syncs/>
</SYNCREF>
<ATTR_JOBS state="1">
<Queue>CLIENT_QUEUE</Queue>
<StartType/>
<HostDst>|&lt;WIN&gt;|HOST</HostDst>
<HostATTR_Type>WINDOWS</HostATTR_Type>
<CodeName/>
<Login/>
<IntAccount/>
<ExtRepDef>1</ExtRepDef>
<ExtRepAll>0</ExtRepAll>
<ExtRepNone>0</ExtRepNone>
<AutoDeactNo>0</AutoDeactNo>
<AutoDeact1ErrorFree>0</AutoDeact1ErrorFree>
<AutoDeactErrorFree>1</AutoDeactErrorFree>
<DeactWhen>ANY_OK</DeactWhen>
<DeactDelay>0</DeactDelay>
<AutoDeactAlways>0</AutoDeactAlways>
<AttDialog>0</AttDialog>
<ActAtRun>1</ActAtRun>
<Consumption>0</Consumption>
<UC4Priority>0</UC4Priority>
<MaxParallel2>0</MaxParallel2>
<MpElse1>1</MpElse1>
<MpElse2>0</MpElse2>
<TZ/>
</ATTR_JOBS>
<ATTR_WINDOWS state="1">
<OutputDb>1</OutputDb>
<OutputDbErr>0</OutputDbErr>
<OutputFile>0</OutputFile>
<IsGenerated>0</IsGenerated>
<BAT>0</BAT>
<COM>0</COM>
<WinBatch>1</WinBatch>
<Standard>1</Standard>
<Minimized>0</Minimized>
<Maximized>0</Maximized>
<JObjDefault>1</JObjDefault>
<JObjYes>0</JObjYes>
<JObjNo>0</JObjNo>
<WorkingDirectory>c:\</WorkingDirectory>
<Command/>
<LogOn>0</LogOn>
<ShowJob>0</ShowJob>
</ATTR_WINDOWS>
<RUNTIME state="1">
<MaxRetCode>0</MaxRetCode>
<MrcExecute/>
<MrcElseE>0</MrcElseE>
<FcstStatus>0| |</FcstStatus>

<ErtMethodDef>1</ErtMethodDef>
<ErtMethodFix>0</ErtMethodFix>
<ErtFix>0</ErtFix>
<ErtDynMethod>2|Average</ErtDynMethod>
<ErtMethodDyn>0</ErtMethodDyn>
<ErtCnt>0</ErtCnt>
<ErtCorr>0</ErtCorr>
<ErtIgn>0</ErtIgn>
<ErtIgnFlg>0</ErtIgnFlg>
<ErtMinCnt>0</ErtMinCnt>
<MrtMethodNone>1</MrtMethodNone>
<MrtMethodFix>0</MrtMethodFix>
<MrtFix>0</MrtFix>
<MrtMethodErt>0</MrtMethodErt>
<MrtErt>0</MrtErt>
<MrtMethodDate>0</MrtMethodDate>
<MrtDays>0</MrtDays>
<MrtTime>00:00</MrtTime>
<MrtTZ/>
<SrtMethodNone>1</SrtMethodNone>
<SrtMethodFix>0</SrtMethodFix>
<SrtFix>0</SrtFix>
<SrtMethodErt>0</SrtMethodErt>
<SrtErt>0</SrtErt>
<MrtCancel>0</MrtCancel>
<MrtExecute>0</MrtExecute>
<MrtExecuteObj/>
</RUNTIME>
<DYNVALUES state="1">
<dyntree>
<node content="1" id="VALUE" name="Variables" parent="" type="VALUE">
<VALUE state="1">
<Values/>
<Mode>0</Mode>
</VALUE>
</node>
</dyntree>
</DYNVALUES>
<ROLLBACK state="1">
<RollbackFlag>0</RollbackFlag>
<CBackupObj/>
<CRollbackObj/>
<FBackupPath/>
<FDeleteBefore>0</FDeleteBefore>
<FInclSubDirs>0</FInclSubDirs>
</ROLLBACK>
<PRE_SCRIPT mode="1" replacementmode="1" state="1">
<PSCRI><![CDATA[:INC PCK.ITPA_SHARED.PUB.INCLUDE.START_STOP_JOB_ACCORDING_TO_AGENT_OS]]></PSCRI>
</PRE_SCRIPT>
<SCRIPT mode="1" state="1">
<MSCRI><![CDATA[! Load powershell utility
: INC PCK.ITPA_SHARED.PUB.INCLUDE.POWERSHELL_UTILITY

! Initialize the error
$errors = 0
!------------------------------------  Validation of Parameters Command/Script File-----------------------------------------------------------------------------------------------
: SET &FLAG# = 0
: IF &UC4RB_WRM_COMMAND# NE ""
:       SET &FLAG# = &FLAG# + 1
: ENDIF

: IF &UC4RB_WRM_SCRIPT_FILE# NE ""
:       SET &FLAG# = &FLAG# + 1
: ENDIF

: IF &FLAG# EQ  2 OR 0
:   STOP MSG, 50, "Either provide Commands or Command File Path for execution"
: ENDIF


!-------------------------------------Logging input parameters-------------------------------------------------------------------------------------------------

: INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.HEADER.PARAM_VALIDATION
: INC PCK.AUTOMIC_MICROSOFT_WINRM.PUB.INCLUDE.LOGGING_CONNECTION_DETAILS

!Script File
: SET &UC4RB_LOGGING_PARAMETER# = "Command File Path"
: SET &UC4RB_LOGGING_PARAMETER_VAL# = &UC4RB_WRM_SCRIPT_FILE#
: INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.PARAM

!Return Code
: SET &UC4RB_LOGGING_PARAMETER# = "Expected Return Code"
: SET &UC4RB_LOGGING_PARAMETER_VAL# = &UC4RB_WRM_RET_CODE#
: INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.PARAM

!Timeout
: SET &UC4RB_LOGGING_PARAMETER# = "Timeout"
: SET &UC4RB_LOGGING_PARAMETER_VAL# = &UC4RB_WRM_TIMEOUT#
: INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.PARAM

: INC PCK.ITPA_SHARED.PRV.INCLUDE.LOGGING.HEADER.EXECUTION

! Create command File

:   IF &UC4RB_WRM_COMMAND# NE ""
!     Get File path
:     SET &AGENT_TEMPDIR# = GET_VAR('UC_EX_PATH_TEMP', &AGENT#)
!     Baseline File
:   SET &UC4RB_COMMAND_FILE_PATH# = STR_CAT(&AGENT_TEMPDIR#,"commands-&$RUNID#.ps1")
:   SET &UC4RB_FILE_CONTENT# = &UC4RB_WRM_COMMAND#
!   Creating file in the temp dir
:   SET &UC4RB_FILE_PATH#=&UC4RB_COMMAND_FILE_PATH#
:   INC PCK.AUTOMIC_MICROSOFT_WINRM.PUB.INCLUDE.CREATE_FILE
:   SET &TEMP_OPTION_VALUE# = &UC4RB_COMMAND_FILE_PATH#
:   INC PCK.AUTOMIC_MICROSOFT_WINRM.PUB.INCLUDE.ESCAPE_ARG_VALUE
:   ELSE
:     SET &TEMP_OPTION_VALUE# = &UC4RB_WRM_SCRIPT_FILE#
:     INC PCK.AUTOMIC_MICROSOFT_WINRM.PUB.INCLUDE.ESCAPE_ARG_VALUE
: ENDIF
      $command_file =  '&UC4RB_WRM_ESC_VALUE#'
: SET &UC4RB_TEMP_COMMAND_FILE# = &UC4RB_WRM_ESC_VALUE#
: PUBLISH &UC4RB_TEMP_COMMAND_FILE#,,"TASK"

! Creating Session with remote host and save session in $session powershell variable
: INC PCK.AUTOMIC_MICROSOFT_WINRM.PUB.INCLUDE.CREATE_SESSION

! --- Create a PSCredential Object containing the username and password ---
!    DECRYPT PASSWORD
:   INC PCK.ITPA_SHARED.PUB.INCLUDE.ATTACH
:   SET &UC4RB_ENCRYPTED_PASSWORD_TMP# = &UC4RB_WRM_PASSWORD#
:   INC PCK.ITPA_SHARED.PRV.INCLUDE.DECRYPT_PASSWORD


Try{

! Check command file exist
  $fileExist = Test-Path  $command_file
  if(!$fileExist){
     throw "Command file not exist. Command File: $command_file"
  }
!  Set the parameter to stop in order to terminate the script execution on error
!   $ErrorActionPreference= 'Stop'

! Securing password
  $secPwd = ConvertTo-SecureString "$UC4_DECRYPTED_PWD" -AsPlainText -Force
! Genearting credential using username and password
: P "Credential commandlet: &UC4RB_WRM_CRED_CMDLET#"
       &UC4RB_WRM_CRED_CMDLET#

!    Session advance option commandlet
: P "Advance session option commandlet: &UC4RB_WRM_PSO_CMDLET#"
    $sessionOption = New-PSSessionOption &UC4RB_WRM_PSO_CMDLET#

!    Creation session commandlet
:  P "Creation session commandlet: &UC4RB_WRM_SESSION_CMDLET#"
     $session = New-PSSession &UC4RB_WRM_SESSION_CMDLET#
 if(!$session){
        throw "Unable to create session from remote Host"
  }

! Specify file which contains commands/script block that needs to be executed.
  $content=[system.io.file]::ReadAllText($command_file)

!Execute the command on target system as script block and as job
!   Passing command file content as argument ..
    $j=Invoke-Command -Session $session -asjob -ScriptBlock {
!   Passing content as input ..
    param ($content)
!   Creating temp file on remote m/c and putting input file content here. We can replace temp with job runid.
    $temppath=[System.IO.Path]::GetTempPath()
    $null=new-item -Path ($temppath+"temp_commands-&$RUNID#.ps1") -Value $content -force -itemtype file
!   execute powershell script
    & ($temppath+"temp_commands-&$RUNID#.ps1") 2>&1

!   We may assume non existece of this variable means as passed so setting it to 0.
    if ($lastexitcode -eq $null)
    {
    $lastexitcode=0
    }
!   Store last exit code.
    $temp=$lastexitcode
!   remove the temprary file as its been executed.
    $null=remove-item ($temppath+"temp_commands-&$RUNID#.ps1") -force
  } -Argumentlist $content

if(!$j){
  throw "Invalid JOB Object"
}

!Wait for the job. Specify timeout here in seconds.
: IF &UC4RB_WRM_TIMEOUT# EQ 0
    $result=wait-job $j
:  ELSE
    $result=wait-job $j -timeout &UC4RB_WRM_TIMEOUT#
: ENDIF


!Stop the job.
$null=stop-job -job $j


write-output `n"******* Command execution output start here *******"
!Recieve output.
receive-job $j
write-output `n"******* Command execution end here *******"
!Remove the job
$null=remove-job $j -force

!Result null means job is not completed with in provided timeframe.
if ($result -eq $null)
{
  throw "Unable to execute command within specified time"
}

! Retrieve the status of last command/lastexit code as set previously.
  $code=Invoke-Command -Session $session -ScriptBlock { $temp }

! Comparing provided Return Code with command return code
:   IF &UC4RB_WRM_RET_CODE# NE ""

   if ($code -ne &UC4RB_WRM_RET_CODE#){
         throw "Expected Return Code input does not match with commands return code[$code]."
     }

: ENDIF

 Write-output "UC4RB_WRM_RETURN_CODE::=$code"

}Catch {
   $errors = 1
   Write-output 'ERROR:' $error

}Finally {
! ----- Close the PSSession session -----
  if($session){
    Remove-PSSession -Session $session
    Write-output "Remote Session with host &UC4RB_WRM_HOST# closed successfully .........."
  }
}

: SET &UC4RB_LOGGING_INFO# = "******** RUN COMMANDS ACTION EXECUTED SUCCESSFULLY ********"
: SET &UC4RB_LOGGING_ERROR# = "******** RUN COMMANDS ACTION FAILED ********"

!------------------------------------------ Error Handling -----------------------------------------------------------------------------------------------------
:INC PCK.AUTOMIC_MICROSOFT_WINRM.PUB.INCLUDE.CHECK_ERRORSTATUS]]></MSCRI>
</SCRIPT>
<OUTPUTSCAN state="1">
<Inherit>N</Inherit>
<filterobjects/>
<HostFsc/>
<LoginFsc/>
</OUTPUTSCAN>
<POST_SCRIPT mode="1" replacementmode="1" state="1">
<OSCRI><![CDATA[!Post processing
: INC PCK.AUTOMIC_MICROSOFT_WINRM.PUB.INCLUDE.DELETE_FILE

:SET &STATUS# = GET_UC_OBJECT_STATUS(,,"RETCODE")
:SET &UC4RB_WRM_RETURN_CODE# = ""
:IF &STATUS# EQ 0
:    SET &HND# = PREP_PROCESS_REPORT("JOBS",, "REP","UC4RB_WRM_RETURN_CODE*","COL=DELIMITER", 'DELIMITER=*::=*')
:    PROCESS &HND#
:      SET &KEY# = GET_PROCESS_LINE(&HND#,1)
:      SET &UC4RB_WRM_RETURN_CODE# = GET_PROCESS_LINE(&HND#,2)
:    ENDPROCESS
:    CLOSE_PROCESS &HND#
:ENDIF
:PUBLISH &UC4RB_WRM_RETURN_CODE#,,"WORKFLOW"]]></OSCRI>
</POST_SCRIPT>
<DOCU_Docu state="1" type="text">
<DOC/>
</DOCU_Docu>
</JOBS_WINDOWS>
</uc-export>